# fc_infoGame.krb


### AXIOMS ###
init_player
    foreach
        infoGame.initGame()

    assert
        python import sys
        python sys.path.append("src/main/modules/game/")
        python from manageGames import *

        # Vamos a crear el juego
        python global game
        python game = ManageGames.createGame("Ejercicio 1")
        python game.createTeam("NS")
        python game.createTeam("EO")

        python game.createPlayer("N", "NS")
        python game.createPlayer("E", "EO")
        python game.createPlayer("S", "NS")
        python game.createPlayer("O", "EO")


        # Objects initialized
        # Nuevas reglas
        infoGame.initialized()
        infoGame.vaGanandoBaza("None")

        # Axioms
        infoGame.jugadorDerecha(S,E)
        infoGame.jugadorDerecha(E,N)
        infoGame.jugadorDerecha(N,W)
        infoGame.jugadorDerecha(W,S)
        infoGame.compi(N,S)
        infoGame.compi(S,N)
        infoGame.compi(E,W)
        infoGame.compi(W,E)
        infoGame.jugadorIzquierda(S,W)
        infoGame.jugadorIzquierda(W,N)
        infoGame.jugadorIzquierda(N,E)
        infoGame.jugadorIzquierda(E,S)
        infoGame.carta(2,2)
        infoGame.carta(3,3)
        infoGame.carta(4,4)
        infoGame.carta(5,5)
        infoGame.carta(6,6)
        infoGame.carta(7,7)
        infoGame.carta(8,8)
        infoGame.carta(9,9)
        infoGame.carta(10,10)
        infoGame.carta(J,11)
        infoGame.carta(Q,12)
        infoGame.carta(K,13)
        infoGame.carta(A,14)



sale_es_juega
    foreach
        infoGame.initialized()
        infoGame.sale($playerSale, $numBaza, $numCarta, $palo)

    assert
        # Nueva regla
        infoGame.juega($playerSale, $numBaza, $numCarta, $palo)



tiene_carta
    foreach
        infoGame.initialized()
        infoGame.tiene($player, $numCarta, $palo)

    assert
        python global game
        python game.setCard($player, $numCarta, $palo)



turno_despues_contrato
    foreach
        infoGame.initialized()
        infoGame.vaGanandoBaza("None")
        infoGame.bazaActual(1)
        infoGame.contrato($nivel, $denominacion, $player)

        infoGame.jugadorIzquierda($player, $turno)

    assert
        # Nueva regla
        infoGame.turno($turno)


baza_actual
    foreach
        infoGame.initialized()

        # Vamos a ver, a partir de todas las proposiciones sale(...)
        #   la baza actual
        python tot = 1

        forall
            infoGame.sale($player, $baza, $numCarta, $palo)

            check $baza > tot
            python tot = $baza
        $tot = int(tot)

    assert
        # Escribir en el fichero de conclusiones
        python phrase_explained = "\nBaza actual: %d\n" % ($tot)

        python print(phrase_explained)
        python f = open("conclusions/conclusiones.txt", "a")
        python f.write(phrase_explained)
        python f.close()


        # Nueva regla
        infoGame.bazaActual($tot)


va_ganando_baza
    foreach
        infoGame.initialized()
        infoGame.bazaActual($baza)
        infoGame.sale($player, $baza, $numCarta, $palo)
        infoGame.carta($numCarta, $valorCarta)

        # Vamos a ver, a partir de todas las proposiciones sale(...)
        #   y juega(...) de la baza actual, quien va ganando
        python winner = $player

        forall
            infoGame.juega($player2, $baza, $numCarta2, $palo)
            infoGame.carta($numCarta2, $valorCarta2)

            check $valorCarta2 > $valorCarta
            python winner = $player2
        $winner = str(winner)

    assert
        # Escribir en el fichero de conclusiones
        python phrase_explained = "\nGanador de la baza actual: %s\n" % ($winner)

        python print(phrase_explained)
        python f = open("conclusions/conclusiones.txt", "a")
        python f.write(phrase_explained)
        python f.close()


        # Nueva regla
        infoGame.vaGanandoBaza($winner)


ultimo_jugador
    foreach
        infoGame.initialized()
        infoGame.bazaActual($baza)
        infoGame.sale($player, $baza, $numCarta, $palo)

        # Vamos a ver, a partir de todas las proposiciones sale(...)
        #   y juega(...) de la baza actual, el ultimo jugador
        python players = [str($player)]
        python lastPlayerOrNextRound = $player

        forall
            infoGame.juega($player2, $baza, $numCarta2, $palo2)

            python players.append(str($player2))

        python global game
        python lastPlayerOrNextRound = game.getLastPlayer(players)
        $lastPlayerOrNextRound = str(lastPlayerOrNextRound)

    assert
        # Escribir en el fichero de conclusiones
        python phrase_explained = "\nUltimo jugador: %s\n" % ($lastPlayerOrNextRound)

        python print(phrase_explained)
        python f = open("conclusions/conclusiones.txt", "a")
        python f.write(phrase_explained)
        python f.close()


        # Nueva regla
        infoGame.ultimoJugador($lastPlayerOrNextRound)


turno
    foreach
        infoGame.initialized()
        infoGame.ultimoJugador($lastPlayer)

        # Comprobamos que no estamos en el final de una baza
        check $lastPlayer != "NextRound"

        infoGame.jugadorIzquierda($lastPlayer, $player)

    assert
        # Escribir en el fichero de conclusiones
        python phrase_explained = "\nTurno del jugador: %s\n" % ($player)

        python print(phrase_explained)
        python f = open("conclusions/conclusiones.txt", "a")
        python f.write(phrase_explained)
        python f.close()


        # Nueva regla
        infoGame.turno($player)


activar_fin_baza
    foreach
        infoGame.initialized()
        infoGame.ultimoJugador($lastPlayer)

        # Comprobamos que estamos en el final de una baza
        check $lastPlayer == "NextRound"

        infoGame.bazaActual($baza)

    assert
        # Escribir en el fichero de conclusiones
        python phrase_explained = "\nHa terminado la baza actual!! (Baza %d) \n" % ($baza)

        python print(phrase_explained)
        python f = open("conclusions/conclusiones.txt", "a")
        python f.write(phrase_explained)
        python f.close()


        # Nuevas reglas
        infoGame.finBaza($baza)


fin_baza
    foreach
        infoGame.initialized()
        infoGame.finBaza($baza)

        infoGame.bazaActual($baza)
        infoGame.vaGanandoBaza($winner)

        python bazaNueva = $baza + 1

    assert
        # Escribir en el fichero de conclusiones
        python phrase_explained = "\nNueva baza!! (Baza %d) \nTurno del jugador: %s\n" % (bazaNueva, $winner)

        python print(phrase_explained)
        python f = open("conclusions/conclusiones.txt", "a")
        python f.write(phrase_explained)
        python f.close()


        # Nuevas reglas
        infoGame.bazaActual(bazaNueva)
        infoGame.turno($winner)
        infoGame.vaGanandoBaza("None")


activar_mayores_eval
    foreach
        infoGame.initialized()
        infoGame.sale($playerSale, 1, $numCarta, $palo)
        infoGame.carta($numCarta, $valorCarta)
        check $valorCarta <= 9

        # Atributos que se pueden evaluar
        infoGame.compi($playerSale, $compi)
        infoGame.jugadorIzquierda($playerSale, $jugIzq)

    assert
        # New rules to evaluate
        infoGame.mayores($compi, $numCarta, $palo)
        infoGame.mayores($jugIzq, $numCarta, $palo)


mayores_eval
    foreach
        infoGame.initialized()
        infoGame.mayores($player, $numCarta, $palo)
        infoGame.carta($numCarta, $valorCarta)

        # Vamos a ver, con las cartas que tenga ese jugador del palo,
        #   el numero de cartas mayores que numCarta
        python tot = 0

        forall
            infoGame.tiene($player, $numCarta2, $palo)
            infoGame.carta($numCarta2, $valorCarta2)

            check $valorCarta2 > $valorCarta
            python tot += 1

        $tot = int(tot)

    assert
        # Escribir en el fichero de conclusiones
        python phrase_explained = "\nEl jugador %s tiene %d cartas mayores que la carta de salida(%d de %s)\n" % ($player, $tot, $numCarta, $palo)

        python print(phrase_explained)
        python f = open("conclusions/conclusiones.txt", "a")
        python f.write(phrase_explained)
        python f.close()


        # Nueva regla
        infoGame.mayoresEval($player, $numCarta, $palo, $tot)



### RULES ###
regla_del_11_2do_defensor
    foreach
        infoGame.initialized()
        infoGame.contrato($num, ST, $playerContrato)
        infoGame.sale($playerSale, 1, $numCarta, $palo)
        infoGame.carta($numCarta, $valorCarta)
        check $valorCarta <= 9

        # Axiomas
        infoGame.compi($playerSale, $compi)
        infoGame.jugadorIzquierda($playerSale, $jugIzq)


        infoGame.mayoresEval($compi, $numCarta, $palo, $mayoresCompi)
        infoGame.mayoresEval($jugIzq, $numCarta, $palo, $mayoresIzq)

        python mayoresContrato = 11 - $valorCarta - $mayoresCompi - $mayoresIzq

        $mayoresContrato = int(mayoresContrato)

    assert
        python print("\n\n-- Regla del 2do defensor -- Conclusion!!!!!!")
        # Escribir en el fichero de conclusiones
        python phrase_explained = "\n\t-- mayores(%s, %d, %s) ES %d!!!\n" % ($playerContrato, $numCarta, $palo, $mayoresContrato)

        python print(phrase_explained)
        python f = open("conclusions/conclusiones.txt", "a")
        python f.write(phrase_explained)
        python f.close()

        #Nueva regla
        infoGame.mayoresFromRegla($playerContrato, $numCarta, $palo, $mayoresContrato)